apiVersion: apps/v1
kind: Deployment
metadata:
  name: <service-name>
  namespace: <namespace>
  labels:
    app: <service-name>
spec:
  replicas: 2
  selector:
    matchLabels:
      app: <service-name>
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: <service-name>
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - <service-name>
              topologyKey: "kubernetes.io/hostname"
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - arm64
      tolerations:
      - key: "CriticalAddonsOnly"
        operator: "Exists"
      serviceAccountName: <service-account-name>
      containers:
      - name: <service-name>
        image: <image-repository>/<image-name>:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
        envFrom:
        - configMapRef:
            name: <service-name>-config
        - secretRef:
            name: aws-secrets
        - secretRef:
            name: <service-name>-secrets
        env:
        - name: AWS_REGION
          value: <aws-region>
        - name: AWS_SECRET_NAME
          value: <secret-key>
        - name: REGISTRY_ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: aws-secrets
              key: REGISTRY_ENCRYPTION_KEY
        - name: DB_ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: aws-secrets
              key: DB_ENCRYPTION_KEY
        - name: REGISTRY_PRIVATE_KEY
          valueFrom:
            secretKeyRef:
              name: aws-secrets
              key: REGISTRY_PRIVATE_KEY
        - name: REGISTRY_PUBLIC_KEY
          valueFrom:
            secretKeyRef:
              name: aws-secrets
              key: REGISTRY_PUBLIC_KEY
        resources:
          requests:
            cpu: "250m"
            memory: "512Mi"
          limits:
            cpu: "500m"
            memory: "1Gi"
        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /health/live
            port: http
          initialDelaySeconds: 30
          periodSeconds: 20
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          failureThreshold: 30
          timeoutSeconds: 5
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
              - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: keys
          mountPath: /app/keys
          readOnly: false
      volumes:
      - name: tmp
        emptyDir: {}
      - name: keys
        emptyDir: {}
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      terminationGracePeriodSeconds: 60